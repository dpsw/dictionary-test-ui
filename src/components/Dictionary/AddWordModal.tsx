import React, { useState, useEffect } from 'react';
import { X, Sparkles, Volume2, Mic, Plus } from 'lucide-react';

interface AddWordModalProps {
  isOpen: boolean;
  onClose: () => void;
  onWordAdded: (entry: any) => void;
  dictionaryId: string;
  initialTerm?: string;
}

export const AddWordModal: React.FC<AddWordModalProps> = ({
  isOpen,
  onClose,
  onWordAdded,
  dictionaryId,
  initialTerm = ''
}) => {
  const [formData, setFormData] = useState({
    term: initialTerm,
    pronunciation: '',
    partOfSpeech: 'noun',
    definition: '',
    example: '',
    translation: '',
    notes: ''
  });
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [isRecording, setIsRecording] = useState(false);

  useEffect(() => {
    setFormData(prev => ({ ...prev, term: initialTerm }));
  }, [initialTerm]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const newEntry = {
      id: `entry-${Date.now()}`,
      dictionaryId,
      term: formData.term,
      pronunciation: formData.pronunciation || undefined,
      partOfSpeech: formData.partOfSpeech,
      definitions: [{
        id: `def-${Date.now()}`,
        text: formData.definition,
        isAiGenerated: false
      }],
      examples: formData.example ? [{
        id: `ex-${Date.now()}`,
        text: formData.example,
        translation: formData.translation || undefined,
        isAiGenerated: false
      }] : [],
      notes: formData.notes || undefined,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    onWordAdded(newEntry);
    setFormData({
      term: '',
      pronunciation: '',
      partOfSpeech: 'noun',
      definition: '',
      example: '',
      translation: '',
      notes: ''
    });
  };

  const generateWithAI = async (field: 'definition' | 'example') => {
    if (!formData.term) return;
    
    setIsGenerating(true);
    
    // Simulate AI generation
    setTimeout(() => {
      if (field === 'definition') {
        setFormData(prev => ({
          ...prev,
          definition: `A comprehensive definition for "${prev.term}" generated by AI. This includes the meaning, usage context, and relevant information.`
        }));
      } else {
        setFormData(prev => ({
          ...prev,
          example: `Here is an example sentence using "${prev.term}" in context to demonstrate proper usage.`,
          translation: `Translation of the example sentence.`
        }));
      }
      setIsGenerating(false);
    }, 1500);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div 
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          onClick={onClose}
        />

        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
          <div className="bg-white px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900">Add Word to Dictionary</h2>
              <button
                onClick={onClose}
                className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="term" className="form-label">Term *</label>
                <input
                  type="text"
                  id="term"
                  className="form-input"
                  value={formData.term}
                  onChange={(e) => setFormData({ ...formData, term: e.target.value })}
                  required
                  autoFocus
                />
              </div>
              
              <div>
                <label htmlFor="partOfSpeech" className="form-label">Part of Speech</label>
                <select
                  id="partOfSpeech"
                  className="form-input"
                  value={formData.partOfSpeech}
                  onChange={(e) => setFormData({ ...formData, partOfSpeech: e.target.value })}
                >
                  <option value="noun">Noun</option>
                  <option value="verb">Verb</option>
                  <option value="adjective">Adjective</option>
                  <option value="adverb">Adverb</option>
                  <option value="pronoun">Pronoun</option>
                  <option value="preposition">Preposition</option>
                  <option value="conjunction">Conjunction</option>
                  <option value="interjection">Interjection</option>
                </select>
              </div>
            </div>
            
            <div>
              <label htmlFor="pronunciation" className="form-label">Pronunciation</label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  id="pronunciation"
                  className="form-input flex-1"
                  value={formData.pronunciation}
                  onChange={(e) => setFormData({ ...formData, pronunciation: e.target.value })}
                  placeholder="e.g., /həˈloʊ/"
                />
                <button
                  type="button"
                  className="btn-secondary px-3"
                  onClick={() => setIsRecording(!isRecording)}
                >
                  {isRecording ? (
                    <Mic className="h-5 w-5 text-red-500" />
                  ) : (
                    <Mic className="h-5 w-5" />
                  )}
                </button>
                <button
                  type="button"
                  className="btn-secondary px-3"
                >
                  <Volume2 className="h-5 w-5" />
                </button>
              </div>
            </div>
            
            <div>
              <div className="flex justify-between items-center mb-1">
                <label htmlFor="definition" className="form-label !mb-0">Definition *</label>
                <button
                  type="button"
                  onClick={() => generateWithAI('definition')}
                  disabled={isGenerating || !formData.term}
                  className="text-primary-600 hover:text-primary-700 text-sm flex items-center disabled:opacity-50"
                >
                  <Sparkles className="h-4 w-4 mr-1" />
                  {isGenerating ? 'Generating...' : 'Generate with AI'}
                </button>
              </div>
              <textarea
                id="definition"
                rows={3}
                className="form-input"
                value={formData.definition}
                onChange={(e) => setFormData({ ...formData, definition: e.target.value })}
                required
              />
            </div>
            
            <div>
              <div className="flex justify-between items-center mb-1">
                <label htmlFor="example" className="form-label !mb-0">Example</label>
                <button
                  type="button"
                  onClick={() => generateWithAI('example')}
                  disabled={isGenerating || !formData.term}
                  className="text-primary-600 hover:text-primary-700 text-sm flex items-center disabled:opacity-50"
                >
                  <Sparkles className="h-4 w-4 mr-1" />
                  {isGenerating ? 'Generating...' : 'Generate with AI'}
                </button>
              </div>
              <textarea
                id="example"
                rows={2}
                className="form-input"
                value={formData.example}
                onChange={(e) => setFormData({ ...formData, example: e.target.value })}
              />
            </div>
            
            <div>
              <label htmlFor="translation" className="form-label">Translation</label>
              <input
                type="text"
                id="translation"
                className="form-input"
                value={formData.translation}
                onChange={(e) => setFormData({ ...formData, translation: e.target.value })}
              />
            </div>
            
            <div>
              <label htmlFor="notes" className="form-label">Notes</label>
              <textarea
                id="notes"
                rows={2}
                className="form-input"
                value={formData.notes}
                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                placeholder="Add any additional notes or context..."
              />
            </div>
            
            <div className="flex justify-end space-x-4 pt-4 border-t border-gray-200">
              <button
                type="button"
                onClick={onClose}
                className="btn-secondary"
              >
                Cancel
              </button>
              <button 
                type="submit" 
                className="btn-primary"
                disabled={!formData.term || !formData.definition}
              >
                <Plus className="h-5 w-5 mr-1" />
                Add Word
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};